; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
<<<<<<< HEAD
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this:
; "calva.autoSelectReplConnectProjectType": "deps.edn"
;   - See https://calva.io/connect/#auto-select-project-type
; 
; Starting Jack-in Terminal: java -jar ".calva\deps.clj.jar" -Sdeps "{:deps {nrepl/nrepl {:mvn/version,""1.0.0""},cider/cider-nrepl {:mvn/version,""0.28.5""}}}" -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
=======
; Aborting jack-in. No project type selected.
; Jacking in...
; Starting Jack-in Terminal: java -jar '/Users/carsonmarano/.vscode/extensions/betterthantomorrow.calva-2.0.331/deps.clj.jar' -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.0.0"},cider/cider-nrepl {:mvn/version,"0.28.5"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
>>>>>>> 8e9d15f7333e30b48e5e1ec343b5d803163ee04f
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/players
clj꞉makeTeams.teams꞉> 
"G"
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/names-with-value
<<<<<<< HEAD
=======
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/players-with-position
>>>>>>> 8e9d15f7333e30b48e5e1ec343b5d803163ee04f
clj꞉makeTeams.teams꞉> 
["Carson" "Ayden" "Mitch" "Spencer" "Rob"]
clj꞉makeTeams.teams꞉> 
["Myles"
 "Tim"
 "Louie"
 "Lawson"
 "Patrick"
 "Ethan"
 "John"
 "Thompson"
 "Jacob"
 "Carter"
 "Robinson"
 "Andrew"
 "Bennet"
 "Ryan"
 "Jordan"
 "Jack"]
clj꞉makeTeams.teams꞉> 
["Sam"
 "Will M"
 "Connor"
 "Steve"
 "Ben"
 "Bayard"
 "Nick"
 "Zion"
 "Thomas"
 "Matt S"
 "Brodie"
 "Alex V"
 "Will F"
 "Paul"
 "Mason"
 "Jack M"]
clj꞉makeTeams.teams꞉> 
["Montana" "Tanyr" "Dylan" "Matt" "Brock" "Alex" "Jake" "Bob"]
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/num-G
clj꞉makeTeams.teams꞉> 
Number of goalies:  5
nil
clj꞉makeTeams.teams꞉> 
5/2
nil
clj꞉makeTeams.teams꞉> 
2
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/num-G
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/num-D
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/num-M
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/num-A
clj꞉makeTeams.teams꞉> 
; Syntax error compiling at (c:\Users\Carson\Documents\cosc452\COSC-452\portfolios\week2\makeTeams\src\makeTeams\teams.clj:105:1).
; Unable to resolve symbol: new-teams in this context
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/new-teams
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/team-2-A
clj꞉makeTeams.teams꞉> 
Team 1 Goalies:  [Carson Ayden]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Goalies:  [Spencer Rob Mitch]
nil
clj꞉makeTeams.teams꞉> 
Test:  #function[clojure.core/test]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Goalies:  [Spencer Rob Mitch]
nil
clj꞉makeTeams.teams꞉> 
Team 1 Goalies:  [Carson Ayden]
nil
clj꞉makeTeams.teams꞉> 
Team 1 Goalies:  [Carson Ayden]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Goalies:  [Spencer Rob Mitch]
nil
clj꞉makeTeams.teams꞉> 
Team 1 Goalies:  [Carson Ayden]
nil
clj꞉makeTeams.teams꞉> 
Team 1 Goalies:  [Carson Ayden]
nil
clj꞉makeTeams.teams꞉> 
Team 1 Goalies:  [Carson Ayden]
nil
clj꞉makeTeams.teams꞉> 
Team 1 Goalies:  [Carson Ayden]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Goalies:  [Spencer Rob Mitch]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Goalies:  [Spencer Rob Mitch]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Goalies:  [Spencer Rob Mitch]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Goalies:  [Spencer Rob Mitch]
nil
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/new-teams
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/team-2
clj꞉makeTeams.teams꞉> 
Team 1 Goalies:  [Spencer Ayden]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Goalies:  [Mitch Carson Rob]
nil
clj꞉makeTeams.teams꞉> 
#'makeTeams.teams/team-2
clj꞉makeTeams.teams꞉> 
Team 1 Goalies:  [Spencer Mitch]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Goalies:  [Rob Ayden Carson]
nil
clj꞉makeTeams.teams꞉> 
Team 1 Defenders:  [Tim Carter Thompson Bennet Robinson Myles John Jack]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Defenders:  [Patrick Louie Jordan Jacob Andrew Ethan Lawson Ryan]
nil
clj꞉makeTeams.teams꞉> 
Team 1 Midfielders:  [Will F Bayard Matt S Connor Zion Nick Paul Mason]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Midfielders:  [Sam Alex V Will M Ben Steve Jack M Thomas Brodie]
nil
clj꞉makeTeams.teams꞉> 
Team 1 Attackers:  [Matt Brock Tanyr Montana]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Attackers:  [Alex Jake Bob Dylan]
nil
clj꞉makeTeams.teams꞉> 
Team 2 Attackers:  [Alex Jake Bob Dylan]
nil
clj꞉makeTeams.teams꞉> 
Team 1:  (Spencer Mitch Tim Carter Thompson Bennet Robinson Myles John Jack Will F Bayard Matt S Connor Zion Nick Paul Mason Matt Brock Tanyr Montana)
nil
clj꞉makeTeams.teams꞉> 
Team 2:  (Rob Ayden Carson Patrick Louie Jordan Jacob Andrew Ethan Lawson Ryan Sam Alex V Will M Ben Steve Jack M Thomas Brodie Alex Jake Bob Dylan)
nil
clj꞉makeTeams.teams꞉> 
