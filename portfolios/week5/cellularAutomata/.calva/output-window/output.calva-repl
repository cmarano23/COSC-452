; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this:
; "calva.autoSelectReplConnectProjectType": "deps.edn"
;   - See https://calva.io/connect/#auto-select-project-type
; 
; Starting Jack-in Terminal: java -jar '/Users/carsonmarano/.vscode/extensions/betterthantomorrow.calva-2.0.335/deps.clj.jar' -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.0.0"},cider/cider-nrepl {:mvn/version,"0.28.5"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Jacking in...
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this:
; "calva.autoSelectReplConnectProjectType": "deps.edn"
;   - See https://calva.io/connect/#auto-select-project-type
; 
; Starting Jack-in Terminal: java -jar '/Users/carsonmarano/.vscode/extensions/betterthantomorrow.calva-2.0.335/deps.clj.jar' -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.0.0"},cider/cider-nrepl {:mvn/version,"0.28.5"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Jacking in...
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this:
; "calva.autoSelectReplConnectProjectType": "deps.edn"
;   - See https://calva.io/connect/#auto-select-project-type
; 
; Starting Jack-in Terminal: java -jar '/Users/carsonmarano/.vscode/extensions/betterthantomorrow.calva-2.0.335/deps.clj.jar' -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.0.0"},cider/cider-nrepl {:mvn/version,"0.28.5"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
; Syntax error compiling at (src/cellularAutomata/cell.clj:7:9).
; Can't take value of a macro: #'clojure.core/or
clj꞉cellularAutomata.cell꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRule
clj꞉cellularAutomata.cell꞉> 
; Execution error (ClassCastException) at cellularAutomata.cell/getRule (REPL:7).
; class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
; Execution error (ClassCastException) at cellularAutomata.cell/getRule (REPL:8).
; class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
clj꞉cellularAutomata.cell꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Rule number:  99
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Rule number:  99
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Rule number:  99
nil
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Invalid rule number. Please enter a number between 0 and 255.
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Rule number:  99
nil
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Sending interrupt.; Evaluation was interrupted
clj꞉cellularAutomata.cell꞉> 
; Execution error (InterruptedException) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject/await (AbstractQueuedSynchronizer.java:1638).
; null
clj꞉cellularAutomata.cell꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Rule number:  99
; Execution error (NullPointerException) at cellularAutomata.cell/askRule (REPL:12).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because the return value of "clojure.lang.IFn.invoke(Object, Object)" is null
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Rule number:  99
99
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Invalid rule number. Please enter a number between 0 and 255.
400
clj꞉cellularAutomata.cell꞉> 
; Syntax error (UnsupportedOperationException) compiling recur at (src/cellularAutomata/cell.clj:12:7).
; Can only recur from tail position
clj꞉cellularAutomata.cell꞉> 
; Syntax error (UnsupportedOperationException) compiling recur at (src/cellularAutomata/cell.clj:12:7).
; Can only recur from tail position
clj꞉cellularAutomata.cell꞉> 
; Syntax error (UnsupportedOperationException) compiling recur at (src/cellularAutomata/cell.clj:12:7).
; Can only recur from tail position
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
nil
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Invalid rule number. Please enter a number between 0 and 255.
Please enter a rule number between 0 and 255: 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/whileRule
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
99
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
400
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a rule number between 0 and 255: 
Sending interrupt.; Evaluation was interrupted
clj꞉cellularAutomata.cell꞉> 
; Execution error (InterruptedException) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject/await (AbstractQueuedSynchronizer.java:1638).
; null
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Invalid Number: Number must be between 0 and 255!
Please enter a rule number between 0 and 255: 
99
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
"(\"0\")1100011"
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
"(\"0\")1100011"
clj꞉cellularAutomata.cell꞉> 
"(\"0\")1100011"
clj꞉cellularAutomata.cell꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"11001000"
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"(\"0\")1100011"
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"(\"0\" \"0\" \"0\" \"0\" \"0\" \"0\")10"
clj꞉cellularAutomata.cell꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/whileRule
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
99
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"(\"0\")1100011"
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"(0)1100011"
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
; Execution error (ClassCastException) at cellularAutomata.cell/convertRuleToBinary (REPL:32).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉cellularAutomata.cell꞉> 
; Syntax error compiling if at (src/cellularAutomata/cell.clj:32:9).
; Too many arguments to if
clj꞉cellularAutomata.cell꞉> 
; Syntax error compiling at (src/cellularAutomata/cell.clj:31:5).
; No such namespace: str
clj꞉cellularAutomata.cell꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/removeParentheses
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/removeParentheses
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"01100011"
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"0 0 0 0 0 010"
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/removeParentheses
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"00000010"
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"00000001"
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"01100011"
clj꞉cellularAutomata.cell꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Invalid Number: Number must be between 0 and 255!
Please enter a rule number between 0 and 255: 
99
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/removeParentheses
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Invalid Number: Number must be between 0 and 255!
Please enter a rule number between 0 and 255: 
"01101110"
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Rules:  0 1 1 0 0 0 1 1
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
; Execution error (IllegalArgumentException) at cellularAutomata.cell/getRules (REPL:50).
; Duplicate key: 0
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
; Execution error (IllegalArgumentException) at cellularAutomata.cell/getRules (REPL:50).
; Duplicate key: 0
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
; Error printing return value (IllegalArgumentException) at clojure.lang.APersistentVector/null (APersistentVector.java:297).
; Key must be integer
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
(:case7 :case6 :case6 :case7 :case7 :case7 :case6 :case6)
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
[0 1 1 0 0 0 1 1]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
#{[:case7 :case6 :case5 :case4 :case3 :case2 :case1 :case0] [0 1 1 0 0 0 1 1]}
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
; Execution error (IllegalArgumentException) at cellularAutomata.cell/getRules (REPL:50).
; Duplicate key: 0
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
{:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
"01100011"
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
nil
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
0
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
1
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/createRow
clj꞉cellularAutomata.cell꞉> 
(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
clj꞉cellularAutomata.cell꞉> 
(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/createFirstRow
clj꞉cellularAutomata.cell꞉> 
(0 0 0 0 0 1 0 0 0 0)
clj꞉cellularAutomata.cell꞉> 
(0 0 0 0 1 0 0 0 0)
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
(0 0 0 0 0 0 0 0 0)
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
(nil nil nil nil nil nil nil nil nil)
clj꞉cellularAutomata.cell꞉> 
Sending interrupt.; Evaluation was interrupted
clj꞉cellularAutomata.cell꞉> 
; Error printing return value (InterruptedException) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject/await (AbstractQueuedSynchronizer.java:1638).
; null
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a rule number between 0 and 255: 
("01100011" "01100011")
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
(1 1 1 1 1 1 1 1 1)
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
(0 0 0 0 0 0 0 0 0)
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
(0 0 0 0 0 0 0 0 0)
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (0 0 0 0 1 0 0 0 0)
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
(1 1 1 1 1 1 1 1 1)
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/createFirstRow
clj꞉cellularAutomata.cell꞉> 
[0 0 0 0 1 0 0 0 0]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
(1 1 1 1 0 0 1 1 1)
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
(rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
(left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askNumRows
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
(rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
(left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
nil
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
(rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
(left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
(rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  (left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
1 1 1 1 0 0 1 1 1)
(left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
left:  nil
center:  nil
right:  nil
1 1 1 1 1 1 1 1 1))
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
(rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
[0 0 0 1 0 1 0 0 0])
nil
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
(rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [0 0 0 0 1 0 0 0 0]
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
left:  0
center:  0
right:  0
rules:  {:case7 0, :case6 1, :case5 1, :case4 0, :case3 0, :case2 0, :case1 1, :case0 1}
row:  [1 1 1 1 0 0 1 1 1]
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  0
left:  1
center:  0
right:  0
left:  0
center:  0
right:  1
left:  0
center:  1
right:  1
left:  1
center:  1
right:  1
left:  1
center:  1
right:  1
[0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0])
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
([0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0])
nil
clj꞉cellularAutomata.cell꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Sending interrupt.; Evaluation was interrupted
clj꞉cellularAutomata.cell꞉> 
; Execution error (InterruptedException) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject/await (AbstractQueuedSynchronizer.java:1638).
; null
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/removeParentheses
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
1
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/createFirstRow
clj꞉cellularAutomata.cell꞉> 
[0 0 0 0 1 0 0 0 0]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
[1 1 1 1 0 0 1 1 1]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askNumRows
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
([0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0] [0 0 0 1 0 1 0 0 0])
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
([0 0 0 1 0 1 0 0 0]
 [0 0 0 1 0 1 0 0 0]
 [0 0 0 1 0 1 0 0 0]
 [0 0 0 1 0 1 0 0 0]
 [0 0 0 1 0 1 0 0 0]
 [0 0 0 1 0 1 0 0 0]
 [0 0 0 1 0 1 0 0 0]
 [0 0 0 1 0 1 0 0 0]
 [0 0 0 1 0 1 0 0 0]
 [0 0 0 1 0 1 0 0 0])
clj꞉cellularAutomata.cell꞉> 
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askRule
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
99
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/removeParentheses
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/convertRuleToBinary
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getRules
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/createFirstRow
clj꞉cellularAutomata.cell꞉> 
[0 0 0 0 1 0 0 0 0]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getNextRow
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
[1 1 1 1 0 0 1 1 1]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askNumRows
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
[0 0 0 0 1 0 0 0 0]
1
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
[1 0 1 0 1 0 0 1 0]
1
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
[[1 0 1 0 1 0 0 1 0]]
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
[1 1 1 1 0 0 1 1 1]
[0 0 0 1 0 1 0 0 0]
[1 1 1 0 1 0 0 1 1]
[0 0 1 1 0 0 1 0 0]
[1 1 0 1 0 1 0 0 1]
[0 1 1 0 1 0 0 1 0]
[1 0 1 1 0 0 1 0 0]
[0 1 0 1 0 1 0 0 1]
[1 0 1 0 1 0 0 1 0]
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
[0 0 0 1 1 0 0 0 0]
[0 0 1 1 1 0 0 0 0]
[0 1 1 0 1 0 0 0 0]
[1 1 1 1 1 0 0 0 0]
[1 0 0 0 1 0 0 0 1]
[1 0 0 1 1 0 0 1 1]
[1 0 1 1 1 0 1 1 0]
[1 1 1 0 1 1 1 1 1]
[0 0 1 1 1 0 0 0 0]
[0 1 1 0 1 0 0 0 0]
[1 1 1 1 1 0 0 0 0]
[1 0 0 0 1 0 0 0 1]
[1 0 0 1 1 0 0 1 1]
[1 0 1 1 1 0 1 1 0]
[1 1 1 0 1 1 1 1 1]
[0 0 1 1 1 0 0 0 0]
[0 1 1 0 1 0 0 0 0]
[1 1 1 1 1 0 0 0 0]
[1 0 0 0 1 0 0 0 1]
[[1 0 0 0 1 0 0 0 1]]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1]
[0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0]
[1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1]
[0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0]
[1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1]
[0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0]
[1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1]
[0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0]
[1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1]
[0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0]
[1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1]
[0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0]
[1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0]
[0 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1]
[1 0 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0]
[[1 0 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0]]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1]
[0 0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0]
[1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1]
[0 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0]
[1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1]
[0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0]
[1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1]
[0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0]
[1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1]
[0 0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0]
[1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1]
[0 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0]
[1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1]
[0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0]
[1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0]
[0 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1]
[1 0 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0]
[[1 0 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0]]
clj꞉cellularAutomata.cell꞉> 
■
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/replaceNums
clj꞉cellularAutomata.cell꞉> 
(□ □ □ □ ■ □ □ □ □)
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/replaceNums
clj꞉cellularAutomata.cell꞉> 
[□ □ □ □ ■ □ □ □ □]
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/printRow
clj꞉cellularAutomata.cell꞉> 
[□ □ □ □ ■ □ □ □ □]
nil
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ □]
[■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■ ■]
[□ □ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □]
[■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■ ■]
[□ □ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □]
[■ ■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■ ■]
[□ □ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □]
[■ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ ■]
[□ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □]
[■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■]
[□ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □]
[■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □]
[□ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■]
[■ □ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □]
[[1 0 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0]]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/printRow
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askLenRows
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows above 0: 
Please enter a length for the rows above 0: 
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ ■ ■ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ □ □ ■ ■ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ ■ ■ □ □ ■ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ □ ■ □ ■ ■ ■ □ □ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ ■ ■ ■ ■ □ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ ■ ■ □ □ ■ ■ ■ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ ■ ■ □ □ □ □ □ □ ■ ■ ■ ■ □ □ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ □ □ ■ □ ■ ■ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ ■ □ ■ □ □ □ □ ■ ■ ■ □ ■ ■ ■ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ ■ ■ ■ ■ ■ □ □ □ ■ ■ □ ■ ■ ■ □ □ ■ □ □ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ ■ ■ □ □ □ ■ □ □ ■ ■ ■ ■ ■ □ ■ □ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ ■ ■ ■ □ □ ■ ■ □ ■ ■ □ □ □ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ ■ ■ □ ■ □ ■ ■ ■ ■ ■ ■ □ □ ■ ■ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ ■ ■ ■ ■ ■ ■ ■ □ □ □ □ ■ □ ■ ■ ■ □ □ □ □ □ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ □ □ □ □ □ ■ □ □ □ ■ ■ ■ ■ □ ■ □ □ □ □ ■ ■ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[■ ■ □ □ □ □ ■ ■ □ □ ■ ■ □ □ ■ ■ ■ □ □ □ ■ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■]
[□ ■ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ □ ■ □ □ ■ ■ ■ □ □ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■]
[■ ■ □ □ ■ ■ □ ■ ■ ■ □ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■]
[□ ■ □ ■ ■ ■ ■ ■ □ ■ ■ ■ □ □ □ □ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □]
[■ ■ ■ ■ □ □ □ ■ ■ ■ □ ■ □ □ □ ■ ■ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □]
[■ □ □ ■ □ □ ■ ■ □ ■ ■ ■ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ ■]
[■ □ ■ ■ □ ■ ■ ■ ■ ■ □ ■ □ ■ ■ □ ■ □ □ □ □ ■ ■ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ ■ ■ ■ ■]
[■ ■ ■ ■ ■ ■ □ □ □ ■ ■ ■ ■ ■ ■ ■ ■ □ □ □ ■ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ □ □ □ □]
[■ □ □ □ □ ■ □ □ ■ ■ □ □ □ □ □ □ ■ □ □ ■ ■ ■ □ □ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■]
[■ □ □ □ ■ ■ □ ■ ■ ■ □ □ □ □ □ ■ ■ □ ■ ■ □ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ □ □ □ ■ ■]
[■ □ □ ■ ■ ■ ■ ■ □ ■ □ □ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ ■ ■ □ □ □ ■ ■ □]
[■ □ ■ ■ □ □ □ ■ ■ ■ □ □ □ ■ ■ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ □ ■ □ □ ■ ■ ■ ■]
[■ ■ ■ ■ □ □ ■ ■ □ ■ □ □ ■ ■ ■ □ □ □ □ □ □ □ ■ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ ■ ■ □ ■ ■ □ □ □]
[■ □ □ ■ □ ■ ■ ■ ■ ■ □ ■ ■ □ ■ □ □ □ □ □ □ ■ ■ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ ■ ■ ■ ■ ■ ■ □ □ ■]
[■ □ ■ ■ ■ ■ □ □ □ ■ ■ ■ ■ ■ ■ □ □ □ □ □ ■ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ ■ ■ ■ ■ ■ ■ ■ □ □ □ □ ■ □ ■ ■]
[■ ■ ■ □ □ ■ □ □ ■ ■ □ □ □ □ ■ □ □ □ □ ■ ■ ■ □ □ ■ ■ □ □ □ □ □ □ □ □ ■ ■ □ □ □ □ □ ■ □ □ □ ■ ■ ■ ■ □]
[■ □ ■ □ ■ ■ □ ■ ■ ■ □ □ □ ■ ■ □ □ □ ■ ■ □ ■ □ ■ ■ ■ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ ■ ■ □ □ ■ ■ □ □ ■ ■]
[■ ■ ■ ■ ■ ■ ■ ■ □ ■ □ □ ■ ■ ■ □ □ ■ ■ ■ ■ ■ ■ ■ □ ■ □ □ □ □ □ □ ■ ■ □ ■ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ □]
[■ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ □ ■ □ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ ■ ■ □ □ ■ ■ □ ■ ■ ■ □ ■ ■ ■ ■ ■]
[■ □ □ □ □ □ ■ ■ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ □ □ □ ■ ■ □ ■ □ □ □ □ ■ ■ □ □ □ ■ □ ■ ■ ■ ■ ■ □ ■ ■ ■ □ □ □ □]
[■ □ □ □ □ ■ ■ ■ ■ ■ □ □ □ □ □ □ □ ■ □ □ □ ■ ■ ■ ■ ■ □ □ □ ■ ■ ■ □ □ ■ ■ ■ ■ □ □ □ ■ ■ ■ □ ■ □ □ □ ■]
[■ □ □ □ ■ ■ □ □ □ ■ □ □ □ □ □ □ ■ ■ □ □ ■ ■ □ □ □ ■ □ □ ■ ■ □ ■ □ ■ ■ □ □ ■ □ □ ■ ■ □ ■ ■ ■ □ □ ■ ■]
[■ □ □ ■ ■ ■ □ □ ■ ■ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ ■ ■ □ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ ■ □ ■ ■ ■ ■ ■ □ ■ □ ■ ■ □]
[■ □ ■ ■ □ ■ □ ■ ■ ■ □ □ □ □ ■ ■ □ ■ ■ ■ □ ■ □ ■ ■ ■ ■ ■ □ □ □ □ □ □ ■ ■ ■ ■ ■ ■ □ □ □ ■ ■ ■ ■ ■ ■ ■]
[[1 0 1 1 0 1 0 1 1 1 0 0 0 0 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1]]
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askNumRows
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/askLenRows
clj꞉cellularAutomata.cell꞉> 
#'cellularAutomata.cell/getCellularAutomata
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows (above 0): 
Please enter the number of cells per row (above 0): 
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Sending interrupt.; Evaluation was interrupted
clj꞉cellularAutomata.cell꞉> 
; Execution error (InterruptedException) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject/await (AbstractQueuedSynchronizer.java:1638).
; null
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows (above 0): 
Please enter the number of cells per row (above 0): 
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □ □ □]
[□ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □]
[□ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ □]
[□ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □]
[■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■]
[□ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □]
[□ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □]
[□ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □]
[■ □ ■ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ ■ □ ■]
[□ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ □ □ □]
[□ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □]
[□ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □]
[□ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □]
[■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ □ □ □ □ ■ □ ■ □ ■ □ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □ □ □ □ ■ □ ■ □ □ □ □]
[□ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □]
[□ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ ■ □ □]
[□ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □]
[■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■]
[□ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □]
[□ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ □]
[□ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □]
[■ □ ■ □ ■ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ □ ■ □ ■]
[[1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1]]
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows (above 0): 
Please enter the number of cells per row (above 0): 
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □]
[□ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □]
[□ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □]
[■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■]
[□ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □]
[□ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □]
[■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■]
[□ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □]
[□ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □]
[□ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □]
[■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □]
[□ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □]
[□ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □]
[■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■]
[□ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □]
[□ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □]
[■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■]
[□ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □]
[□ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □]
[□ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □]
[■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □]
[□ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □]
[□ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □]
[■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■]
[□ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □]
[□ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □]
[■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■]
[□ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □]
[□ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □]
[□ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □]
[■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ □ □ □]
[□ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □ ■ □ □ □]
[□ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ ■ ■ □ □]
[[0 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 0]]
clj꞉cellularAutomata.cell꞉> 
Please enter a rule number between 0 and 255: 
Please enter a number of rows (above 0): 
Please enter the number of cells per row (above 0): 
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ ■ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ □ ■ ■ □ □ ■ □ □ □ □ ■ □ □ ■ □ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ ■ ■ ■ □ □ ■ ■ ■ ■ ■ ■ □ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ □ ■ ■ □ □ ■ □ □ □ ■ ■ ■ □ □ □ □ □ ■ □ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ □ ■ ■ □ ■ ■ ■ ■ □ ■ ■ □ □ ■ □ □ □ ■ ■ ■ □ □ □ □ □ □ □ □]
[□ □ □ □ □ □ □ ■ ■ □ □ ■ □ □ □ □ ■ □ ■ ■ ■ ■ □ ■ ■ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ □ □ □ ■ ■ □ ■ ■ ■ ■ □ □ ■ ■ □ ■ □ □ □ □ ■ □ ■ ■ ■ ■ □ □ □ □ □ □]
[□ □ □ □ □ ■ ■ □ □ ■ □ □ □ ■ ■ ■ □ □ ■ ■ □ □ ■ ■ □ ■ □ □ □ ■ □ □ □ □ □]
[□ □ □ □ ■ ■ □ ■ ■ ■ ■ □ ■ ■ □ □ ■ ■ ■ □ ■ ■ ■ □ □ ■ ■ □ ■ ■ ■ □ □ □ □]
[□ □ □ ■ ■ □ □ ■ □ □ □ □ ■ □ ■ ■ ■ □ □ □ ■ □ □ ■ ■ ■ □ □ ■ □ □ ■ □ □ □]
[□ □ ■ ■ □ ■ ■ ■ ■ □ □ ■ ■ □ ■ □ □ ■ □ ■ ■ ■ ■ ■ □ □ ■ ■ ■ ■ ■ ■ ■ □ □]
[□ ■ ■ □ □ ■ □ □ □ ■ ■ ■ □ □ ■ ■ ■ ■ □ ■ □ □ □ □ ■ ■ ■ □ □ □ □ □ □ ■ □]
[■ ■ □ ■ ■ ■ ■ □ ■ ■ □ □ ■ ■ ■ □ □ □ □ ■ ■ □ □ ■ ■ □ □ ■ □ □ □ □ ■ ■ ■]
[□ □ □ ■ □ □ □ □ ■ □ ■ ■ ■ □ □ ■ □ □ ■ ■ □ ■ ■ ■ □ ■ ■ ■ ■ □ □ ■ ■ □ □]
[□ □ ■ ■ ■ □ □ ■ ■ □ ■ □ □ ■ ■ ■ ■ ■ ■ □ □ ■ □ □ □ ■ □ □ □ ■ ■ ■ □ ■ □]
[□ ■ ■ □ □ ■ ■ ■ □ □ ■ ■ ■ ■ □ □ □ □ □ ■ ■ ■ ■ □ ■ ■ ■ □ ■ ■ □ □ □ ■ ■]
[□ ■ □ ■ ■ ■ □ □ ■ ■ ■ □ □ □ ■ □ □ □ ■ ■ □ □ □ □ ■ □ □ □ ■ □ ■ □ ■ ■ □]
[■ ■ □ ■ □ □ ■ ■ ■ □ □ ■ □ ■ ■ ■ □ ■ ■ □ ■ □ □ ■ ■ ■ □ ■ ■ □ ■ □ ■ □ ■]
[□ □ □ ■ ■ ■ ■ □ □ ■ ■ ■ □ ■ □ □ □ ■ □ □ ■ ■ ■ ■ □ □ □ ■ □ □ ■ □ ■ □ ■]
[■ □ ■ ■ □ □ □ ■ ■ ■ □ □ □ ■ ■ □ ■ ■ ■ ■ ■ □ □ □ ■ □ ■ ■ ■ ■ ■ □ ■ □ ■]
[□ □ ■ □ ■ □ ■ ■ □ □ ■ □ ■ ■ □ □ ■ □ □ □ □ ■ □ ■ ■ □ ■ □ □ □ □ □ ■ □ ■]
[■ ■ ■ □ ■ □ ■ □ ■ ■ ■ □ ■ □ ■ ■ ■ ■ □ □ ■ ■ □ ■ □ □ ■ ■ □ □ □ ■ ■ □ ■]
[□ □ □ □ ■ □ ■ □ ■ □ □ □ ■ □ ■ □ □ □ ■ ■ ■ □ □ ■ ■ ■ ■ □ ■ □ ■ ■ □ □ ■]
[■ □ □ ■ ■ □ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ ■ ■ □ □ □ □ ■ □ ■ □ ■ ■ ■]
[□ ■ ■ ■ □ □ ■ □ ■ □ □ ■ □ □ ■ □ □ ■ □ ■ ■ ■ □ □ ■ □ □ ■ ■ □ ■ □ ■ □ □]
[■ ■ □ □ ■ ■ ■ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ ■ □ □ ■ ■ ■ ■ ■ ■ □ □ ■ □ ■ ■ □]
[■ □ ■ ■ ■ □ □ □ ■ □ □ □ □ □ □ □ □ □ □ ■ ■ ■ ■ □ □ □ □ □ ■ ■ ■ □ ■ □ □]
[■ □ ■ □ □ ■ □ ■ ■ ■ □ □ □ □ □ □ □ □ ■ ■ □ □ □ ■ □ □ □ ■ ■ □ □ □ ■ ■ ■]
[□ □ ■ ■ ■ ■ □ ■ □ □ ■ □ □ □ □ □ □ ■ ■ □ ■ □ ■ ■ ■ □ ■ ■ □ ■ □ ■ ■ □ □]
[□ ■ ■ □ □ □ □ ■ ■ ■ ■ ■ □ □ □ □ ■ ■ □ □ ■ □ ■ □ □ □ ■ □ □ ■ □ ■ □ ■ □]
[■ ■ □ ■ □ □ ■ ■ □ □ □ □ ■ □ □ ■ ■ □ ■ ■ ■ □ ■ ■ □ ■ ■ ■ ■ ■ □ ■ □ ■ ■]
[□ □ □ ■ ■ ■ ■ □ ■ □ □ ■ ■ ■ ■ ■ □ □ ■ □ □ □ ■ □ □ ■ □ □ □ □ □ ■ □ ■ □]
[□ □ ■ ■ □ □ □ □ ■ ■ ■ ■ □ □ □ □ ■ ■ ■ ■ □ ■ ■ ■ ■ ■ ■ □ □ □ ■ ■ □ ■ ■]
[■ ■ ■ □ ■ □ □ ■ ■ □ □ □ ■ □ □ ■ ■ □ □ □ □ ■ □ □ □ □ □ ■ □ ■ ■ □ □ ■ □]
[■ □ □ □ ■ ■ ■ ■ □ ■ □ ■ ■ ■ ■ ■ □ ■ □ □ ■ ■ ■ □ □ □ ■ ■ □ ■ □ ■ ■ ■ □]
[■ ■ □ ■ ■ □ □ □ □ ■ □ ■ □ □ □ □ □ ■ ■ ■ ■ □ □ ■ □ ■ ■ □ □ ■ □ ■ □ □ □]
[■ □ □ ■ □ ■ □ □ ■ ■ □ ■ ■ □ □ □ ■ ■ □ □ □ ■ ■ ■ □ ■ □ ■ ■ ■ □ ■ ■ □ ■]
[□ ■ ■ ■ □ ■ ■ ■ ■ □ □ ■ □ ■ □ ■ ■ □ ■ □ ■ ■ □ □ □ ■ □ ■ □ □ □ ■ □ □ ■]
[□ ■ □ □ □ ■ □ □ □ ■ ■ ■ □ ■ □ ■ □ □ ■ □ ■ □ ■ □ ■ ■ □ ■ ■ □ ■ ■ ■ ■ ■]
[□ ■ ■ □ ■ ■ ■ □ ■ ■ □ □ □ ■ □ ■ ■ ■ ■ □ ■ □ ■ □ ■ □ □ ■ □ □ ■ □ □ □ □]
[■ ■ □ □ ■ □ □ □ ■ □ ■ □ ■ ■ □ ■ □ □ □ □ ■ □ ■ □ ■ ■ ■ ■ ■ ■ ■ ■ □ □ □]
[■ □ ■ ■ ■ ■ □ ■ ■ □ ■ □ ■ □ □ ■ ■ □ □ ■ ■ □ ■ □ ■ □ □ □ □ □ □ □ ■ □ ■]
[□ □ ■ □ □ □ □ ■ □ □ ■ □ ■ ■ ■ ■ □ ■ ■ ■ □ □ ■ □ ■ ■ □ □ □ □ □ ■ ■ □ ■]
[■ ■ ■ ■ □ □ ■ ■ ■ ■ ■ □ ■ □ □ □ □ ■ □ □ ■ ■ ■ □ ■ □ ■ □ □ □ ■ ■ □ □ ■]
[□ □ □ □ ■ ■ ■ □ □ □ □ □ ■ ■ □ □ ■ ■ ■ ■ ■ □ □ □ ■ □ ■ ■ □ ■ ■ □ ■ ■ ■]
[■ □ □ ■ ■ □ □ ■ □ □ □ ■ ■ □ ■ ■ ■ □ □ □ □ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ □]
[■ ■ ■ ■ □ ■ ■ ■ ■ □ ■ ■ □ □ ■ □ □ ■ □ □ ■ ■ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ ■ ■]
[□ □ □ □ □ ■ □ □ □ □ ■ □ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ □ ■ ■ ■ ■ □ □ □ □ □ □ □ □]
[□ □ □ □ ■ ■ ■ □ □ ■ ■ □ ■ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ □ ■ □ □ □ □ □ □ □]
[□ □ □ ■ ■ □ □ ■ ■ ■ □ □ ■ ■ □ □ □ □ □ □ ■ ■ □ □ ■ □ ■ ■ ■ □ □ □ □ □ □]
[□ □ ■ ■ □ ■ ■ ■ □ □ ■ ■ ■ □ ■ □ □ □ □ ■ ■ □ ■ ■ ■ □ ■ □ □ ■ □ □ □ □ □]
[□ ■ ■ □ □ ■ □ □ ■ ■ ■ □ □ □ ■ ■ □ □ ■ ■ □ □ ■ □ □ □ ■ ■ ■ ■ ■ □ □ □ □]
[■ ■ □ ■ ■ ■ ■ ■ ■ □ □ ■ □ ■ ■ □ ■ ■ ■ □ ■ ■ ■ ■ □ ■ ■ □ □ □ □ ■ □ □ □]
[■ □ □ ■ □ □ □ □ □ ■ ■ ■ □ ■ □ □ ■ □ □ □ ■ □ □ □ □ ■ □ ■ □ □ ■ ■ ■ □ ■]
[□ ■ ■ ■ ■ □ □ □ ■ ■ □ □ □ ■ ■ ■ ■ ■ □ ■ ■ ■ □ □ ■ ■ □ ■ ■ ■ ■ □ □ □ ■]
[□ ■ □ □ □ ■ □ ■ ■ □ ■ □ ■ ■ □ □ □ □ □ ■ □ □ ■ ■ ■ □ □ ■ □ □ □ ■ □ ■ ■]
[□ ■ ■ □ ■ ■ □ ■ □ □ ■ □ ■ □ ■ □ □ □ ■ ■ ■ ■ ■ □ □ ■ ■ ■ ■ □ ■ ■ □ ■ □]
[■ ■ □ □ ■ □ □ ■ ■ ■ ■ □ ■ □ ■ ■ □ ■ ■ □ □ □ □ ■ ■ ■ □ □ □ □ ■ □ □ ■ ■]
[□ □ ■ ■ ■ ■ ■ ■ □ □ □ □ ■ □ ■ □ □ ■ □ ■ □ □ ■ ■ □ □ ■ □ □ ■ ■ ■ ■ ■ □]
[□ ■ ■ □ □ □ □ □ ■ □ □ ■ ■ □ ■ ■ ■ ■ □ ■ ■ ■ ■ □ ■ ■ ■ ■ ■ ■ □ □ □ □ ■]
[□ ■ □ ■ □ □ □ ■ ■ ■ ■ ■ □ □ ■ □ □ □ □ ■ □ □ □ □ ■ □ □ □ □ □ ■ □ □ ■ ■]
[□ ■ □ ■ ■ □ ■ ■ □ □ □ □ ■ ■ ■ ■ □ □ ■ ■ ■ □ □ ■ ■ ■ □ □ □ ■ ■ ■ ■ ■ □]
[■ ■ □ ■ □ □ ■ □ ■ □ □ ■ ■ □ □ □ ■ ■ ■ □ □ ■ ■ ■ □ □ ■ □ ■ ■ □ □ □ □ ■]
[□ □ □ ■ ■ ■ ■ □ ■ ■ ■ ■ □ ■ □ ■ ■ □ □ ■ ■ ■ □ □ ■ ■ ■ □ ■ □ ■ □ □ ■ ■]
[■ □ ■ ■ □ □ □ □ ■ □ □ □ □ ■ □ ■ □ ■ ■ ■ □ □ ■ ■ ■ □ □ □ ■ □ ■ ■ ■ ■ □]
[■ □ ■ □ ■ □ □ ■ ■ ■ □ □ ■ ■ □ ■ □ ■ □ □ ■ ■ ■ □ □ ■ □ ■ ■ □ ■ □ □ □ □]
[■ □ ■ □ ■ ■ ■ ■ □ □ ■ ■ ■ □ □ ■ □ ■ ■ ■ ■ □ □ ■ ■ ■ □ ■ □ □ ■ ■ □ □ ■]
[□ □ ■ □ ■ □ □ □ ■ ■ ■ □ □ ■ ■ ■ □ ■ □ □ □ ■ ■ ■ □ □ □ ■ ■ ■ ■ □ ■ ■ ■]
[■ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ ■ ■ □ □ □ ■ ■ □ ■ ■ □ □ ■ □ ■ ■ □ □ □ □ ■ □ □]
[■ □ □ □ ■ □ □ ■ □ ■ ■ ■ □ □ ■ □ ■ ■ □ □ ■ □ ■ ■ ■ □ ■ □ ■ □ □ ■ ■ ■ ■]
[□ ■ □ ■ ■ ■ ■ ■ □ ■ □ □ ■ ■ ■ □ ■ □ ■ ■ ■ □ ■ □ □ □ ■ □ ■ ■ ■ ■ □ □ □]
[■ ■ □ ■ □ □ □ □ □ ■ ■ ■ ■ □ □ □ ■ □ ■ □ □ □ ■ ■ □ ■ ■ □ ■ □ □ □ ■ □ □]
[■ □ □ ■ ■ □ □ □ ■ ■ □ □ □ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ ■ ■ □ ■ ■ ■ ■]
[□ ■ ■ ■ □ ■ □ ■ ■ □ ■ □ ■ ■ □ ■ □ □ ■ □ □ ■ □ ■ ■ ■ ■ ■ ■ □ □ ■ □ □ □]
[■ ■ □ □ □ ■ □ ■ □ □ ■ □ ■ □ □ ■ ■ ■ ■ ■ ■ ■ □ ■ □ □ □ □ □ ■ ■ ■ ■ □ □]
[■ □ ■ □ ■ ■ □ ■ ■ ■ ■ □ ■ ■ ■ ■ □ □ □ □ □ □ □ ■ ■ □ □ □ ■ ■ □ □ □ ■ ■]
[□ □ ■ □ ■ □ □ ■ □ □ □ □ ■ □ □ □ ■ □ □ □ □ □ ■ ■ □ ■ □ ■ ■ □ ■ □ ■ ■ □]
[□ ■ ■ □ ■ ■ ■ ■ ■ □ □ ■ ■ ■ □ ■ ■ ■ □ □ □ ■ ■ □ □ ■ □ ■ □ □ ■ □ ■ □ ■]
[□ ■ □ □ ■ □ □ □ □ ■ ■ ■ □ □ □ ■ □ □ ■ □ ■ ■ □ ■ ■ ■ □ ■ ■ ■ ■ □ ■ □ ■]
[□ ■ ■ ■ ■ ■ □ □ ■ ■ □ □ ■ □ ■ ■ ■ ■ ■ □ ■ □ □ ■ □ □ □ ■ □ □ □ □ ■ □ ■]
[□ ■ □ □ □ □ ■ ■ ■ □ ■ ■ ■ □ ■ □ □ □ □ □ ■ ■ ■ ■ ■ □ ■ ■ ■ □ □ ■ ■ □ ■]
[□ ■ ■ □ □ ■ ■ □ □ □ ■ □ □ □ ■ ■ □ □ □ ■ ■ □ □ □ □ □ ■ □ □ ■ ■ ■ □ □ ■]
[□ ■ □ ■ ■ ■ □ ■ □ ■ ■ ■ □ ■ ■ □ ■ □ ■ ■ □ ■ □ □ □ ■ ■ ■ ■ ■ □ □ ■ ■ ■]
[□ ■ □ ■ □ □ □ ■ □ ■ □ □ □ ■ □ □ ■ □ ■ □ □ ■ ■ □ ■ ■ □ □ □ □ ■ ■ ■ □ □]
[■ ■ □ ■ ■ □ ■ ■ □ ■ ■ □ ■ ■ ■ ■ ■ □ ■ ■ ■ ■ □ □ ■ □ ■ □ □ ■ ■ □ □ ■ □]
[■ □ □ ■ □ □ ■ □ □ ■ □ □ ■ □ □ □ □ □ ■ □ □ □ ■ ■ ■ □ ■ ■ ■ ■ □ ■ ■ ■ □]
[■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ ■ □ □ □ ■ ■ ■ □ ■ ■ □ □ □ ■ □ □ □ □ ■ □ □ □]
[■ □ □ □ □ □ □ □ □ □ □ □ □ □ ■ □ ■ ■ □ □ □ ■ □ ■ □ ■ ■ ■ □ □ ■ ■ ■ □ ■]
[□ ■ □ □ □ □ □ □ □ □ □ □ □ ■ ■ □ ■ □ ■ □ ■ ■ □ ■ □ ■ □ □ ■ ■ ■ □ □ □ ■]
[□ ■ ■ □ □ □ □ □ □ □ □ □ ■ ■ □ □ ■ □ ■ □ ■ □ □ ■ □ ■ ■ ■ ■ □ □ ■ □ ■ ■]
[□ ■ □ ■ □ □ □ □ □ □ □ ■ ■ □ ■ ■ ■ □ ■ □ ■ ■ ■ ■ □ ■ □ □ □ ■ ■ ■ □ ■ □]
[■ ■ □ ■ ■ □ □ □ □ □ ■ ■ □ □ ■ □ □ □ ■ □ ■ □ □ □ □ ■ ■ □ ■ ■ □ □ □ ■ ■]
[□ □ □ ■ □ ■ □ □ □ ■ ■ □ ■ ■ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ ■ □ □ ■ □ ■ □ ■ ■ □]
[□ □ ■ ■ □ ■ ■ □ ■ ■ □ □ ■ □ □ □ □ ■ □ □ ■ □ ■ ■ ■ □ ■ ■ ■ □ ■ □ ■ □ ■]
[■ ■ ■ □ □ ■ □ □ ■ □ ■ ■ ■ ■ □ □ ■ ■ ■ ■ ■ □ ■ □ □ □ ■ □ □ □ ■ □ ■ □ ■]
[[1 1 1 0 0 1 0 0 1 0 1 1 1 1 0 0 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1]]
clj꞉cellularAutomata.cell꞉> 
